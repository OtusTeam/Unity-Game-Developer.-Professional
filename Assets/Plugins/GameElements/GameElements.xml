<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameElements</name>
    </assembly>
    <members>
        <member name="T:GameElements.GameElement">
            <inheritdoc cref="T:GameElements.IGameElement"/>
        </member>
        <member name="P:GameElements.GameElement.State">
            <summary>
                <para>Game state of this element.</para>
            </summary>
        </member>
        <member name="P:GameElements.GameElement.GameSystem">
            <summary>
                <para>A game system reference.</para>
            </summary>
        </member>
        <member name="T:GameElements.GameElementGroup">
            <inheritdoc cref="T:GameElements.IGameElementGroup"/>
        </member>
        <member name="T:GameElements.GameElementLayer">
            <inheritdoc cref="T:GameElements.IGameElementLayer"/>
        </member>
        <member name="T:GameElements.GameElementMap`2">
            <inheritdoc cref="T:GameElements.IGameElementMap`2"/>
        </member>
        <member name="T:GameElements.GameElementSet">
            <inheritdoc cref="T:GameElements.IGameElementSet"/>
        </member>
        <member name="T:GameElements.GameSystem">
            <inheritdoc cref="!:IGameElementSystem"/>
        </member>
        <member name="T:GameElements.IGameElement">
            <summary>
                <para>A contract of game element.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnRegistered(GameElements.IGameSystem)">
            <summary>
                <para>Called when this element is registered into the game context.</para>
            </summary>
            <param name="system">Game system.</param>
        </member>
        <member name="M:GameElements.IGameElement.OnPrepareGame">
            <summary>
                <para>Called when a game prepares.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnReadyGame">
            <summary>
                <para>Called when a game is ready.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnStartGame">
            <summary>
                <para>Called when a game is started.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnPauseGame">
            <summary>
                <para>Called when a game is paused.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnResumeGame">
            <summary>
                <para>Called when a game is resumed.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnFinishGame">
            <summary>
                <para>Called when a game is ended.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnDestroyGame">
            <summary>
                <para>Called when a game is destroyed.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElement.OnUnregistered">
            <summary>
                <para>Called when this element is unregistered from the game context.</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameElementGroup">
            <summary>
                <para>Represents an element as a group of elements.</para>
            </summary>
        </member>
        <member name="P:GameElements.IGameElementGroup.ElementCount">
            <summary>
                <para>Count of elements in this group.</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameElementLayer">
            <summary>
                <para>Represents an element as a dictionary of generic elements.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementLayer.AddElement(System.Object)">
            <summary>
                <para>Adds an element into the layer.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementLayer.RemoveElement(System.Object)">
            <summary>
                <para>Removes an element from the layer.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementLayer.GetElement``1">
            <summary>
                <para>Returns an element of "T".</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementLayer.TryGetElement``1(``0@)">
            <summary>
                <para>Tries to get an element of "T".</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameElementMap`2">
            <summary>
                <para>Represents an element as a dictionary of elements.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementMap`2.AddElement(`0,`1)">
            <summary>
                <para>Adds an element into the dictionary.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementMap`2.RemoveElement(`0)">
            <summary>
                <para>Removes an element from the dictionary.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementMap`2.GetElement``1(`0)">
            <summary>
                <para>Returns an element.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementMap`2.TryGetElement``1(`0,``0@)">
            <summary>
                <para>Tries to get an element from the dictionary.</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameElementSet">
            <summary>
                <para>Represents an element as a set of elements.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementSet.AddElement(System.Object)">
            <summary>
                <para>Adds an element into the set.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementSet.RemoveElement(System.Object)">
            <summary>
                <para>Removes an element into the set.</para>
            </summary>
        </member>
        <member name="M:GameElements.IGameElementSet.ContainsElement(System.Object)">
            <summary>
                <para>Checks an element into the set.</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameSystem">
            <summary>
                <para>A game context contract.</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameObservable">
            <summary>
                <para>Observable game contract.</para>
            </summary>
        </member>
        <member name="E:GameElements.IGameObservable.OnGamePrepared">
            <summary>
                <para>Called when a game is prepared. <see cref="M:GameElements.IGameObservable.PrepareGame(System.Object)"/></para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="E:GameElements.IGameObservable.OnGameReady">
            <summary>
                <para>Called when a game is ready. <see cref="M:GameElements.IGameObservable.ReadyGame(System.Object)"/></para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="E:GameElements.IGameObservable.OnGameStarted">
            <summary>
                <para>Called when a game is started. <see cref="M:GameElements.IGameObservable.StartGame(System.Object)"/></para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="E:GameElements.IGameObservable.OnGamePaused">
            <summary>
                <para>Called when game is paused. <see cref="M:GameElements.IGameObservable.PauseGame(System.Object)"/></para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="E:GameElements.IGameObservable.OnGameResumed">
            <summary>
                <para>Called when game is resumed. <see cref="M:GameElements.IGameObservable.ResumeGame(System.Object)"/></para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="E:GameElements.IGameObservable.OnGameFinished">
            <summary>
                <para>Called when game is finished. <see cref="M:GameElements.IGameObservable.FinishGame(System.Object)"/></para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.PrepareGame(System.Object)">
            <summary>
                <para>Setups a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.ReadyGame(System.Object)">
            <summary>
                <para>Sets ready a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.StartGame(System.Object)">
            <summary>
                <para>Starts a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.PauseGame(System.Object)">
            <summary>
                <para>Pauses a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.ResumeGame(System.Object)">
            <summary>
                <para>Resumes a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.FinishGame(System.Object)">
            <summary>
                <para>Finishes a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GameElements.IGameObservable.DestroyGame(System.Object)">
            <summary>
                <para>Destroys a game.</para>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:GameElements.Unity.UnityGameElement">
            <inheritdoc cref="T:GameElements.IGameElement"/>
        </member>
        <member name="P:GameElements.Unity.UnityGameElement.State">
            <summary>
                <para>Game state of this element.</para>
            </summary>
        </member>
        <member name="P:GameElements.Unity.UnityGameElement.GameSystem">
            <summary>
                <para>A game system reference.</para>
            </summary>
        </member>
        <member name="T:GameElements.Unity.UnityGameElementGroup">
            <inheritdoc cref="T:GameElements.IGameElementGroup"/>
        </member>
        <member name="T:GameElements.Unity.UnityGameElementLayer">
            <inheritdoc cref="T:GameElements.IGameElementLayer"/>
        </member>
        <member name="T:GameElements.Unity.UnityGameElementMap`2">
            <inheritdoc cref="T:GameElements.IGameElementMap`2"/>
        </member>
        <member name="T:GameElements.Unity.UnityGameElementSet">
            <inheritdoc cref="T:GameElements.IGameElementSet"/>
        </member>
        <member name="T:GameElements.Unity.UnityGameSystem">
            <inheritdoc cref="!:IGameElementSystem"/>
        </member>
        <member name="T:GameElements.GameState">
            <summary>
                <para>A game state.</para>
            </summary>
        </member>
        <member name="T:GameElements.IGameStateable">
            <summary>
                <para>Provides a game state.</para>
            </summary>
        </member>
    </members>
</doc>
